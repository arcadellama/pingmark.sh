#!/usr/bin/env sh

set -u
LC_ALL=C
Prgnam="$(basename "$0")"
Base_Dir="${XDG_RUNTIME_DIR:-$HOME}"
Working_Dir="$Base_Dir/$Prgnam"
PID_File="$Working_Dir/$Prgnam.pid"
Verbose="${Verbose:-0}"

# Function: cleanup files after exit
cleanup() {
  rm -rf "$PID_File"
}

# Function: output date for logging
logdate() (
  if ! date +'%Y-%m-%dT%H:%M:%S%z' 2>/dev/null; then
    # Fail as gracefully as possible
    if ! basename "$0" 2>/dev/null; then
      printf "INFO\n"
    fi
  fi
)

# Function: Log to stderr
# Environment: Verbose (optional)
# Arguments: verbosity, string
log() (
  v=""
  if [ -n "${2:-}" ]; then
    if printf %d "${1:-}" >/dev/null 2>&1; then
      v="${1:-}"
      shift
    fi
  fi
  if [ -n "${Verbose:-}" ] \
    && [ -n "$v" ] \
    && [ "$v" -gt "${Verbose:-}" ]; then
      return
  fi

  printf '\033[1m[%s]: %s\n\033[m' >&2 "$(logdate)" "$*"
)

# Function: Log to warning stderr
# Environment: Verbose (optional)
# Arguments: verbosity, string
logwarn() (
  v=""
  if [ -n "${2:-}" ]; then
    if printf %d "${1:-}" >/dev/null 2>&1; then
      v="${1:-}"
      shift
    fi
  fi
  if [ -n "${Verbose:-}" ] \
    && [ -n "$v" ] \
    && [ "$v" -gt "${Verbose:-}" ]; then
      return
  fi

  printf '\033[1;33m[%s] WARN: %s\n\033[m' >&2 "$(logdate)" "$*"
)

# Function: Log error to stderr
# Environment: Verbose (optional)
# Arguments: string
logerr() (
  printf '\033[1;31m[%s] ERROR: %s\n\033[m' >&2 "$(logdate)" "$*"
)

pingcheck() (
  if ! ping -c 1 "$1" >/dev/null 2>&1; then
    if ! [ -f "$Working_Dir/$1" ]; then
      printf "%s is DOWN at %s\n" "$1" "$(logdate)"
      touch "$Working_Dir/$1" || exit 1
      return 1
    fi
  else
    if [ -f "$Working_Dir/$1" ]; then
      printf "%s is UP at %s\n" "$1" "$(logdate)"
      rm "$Working_Dir/$1" || exit 1
    fi
  fi
)

main() {
  retval=0
  bg_pid=""

  while getopts 'v' opt; do
    case "${opt:-}" in
      v) Verbose="$((Verbose+1))" ;;
    esac
  done
  shift "$((OPTIND - 1))"

  if [ -r "$PID_File" ]; then
    logerr "Process $(cat "$PID_File") already running?"
    exit 1
  fi

  log 3 "Creating pid file at $PID_File"
  mkdir -p "$Working_Dir" || exit 1
  printf %s\\n "$$" > "$PID_File" || exit 1

  for s in $@; do
    log 1 "Checking $s..."
    pingcheck "$s" & 
    bg_pid="$(printf '%d\n%s\n' "$!" "$bg_pid")"
  done
  log 3 "Waiting for processes to exit"
  for r in $bg_pid; do
    wait "$r"
    retval="$((retval + $?))"
  done
  return "$retval"
}

trap cleanup EXIT
main "$@"
