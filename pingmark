#!/usr/bin/env sh

# MIT License
# 
# Copyright (c) 2024 Justin Teague
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -u
LC_ALL=C
Prgnam="$(basename "$0")"
Base_Dir="${XDG_RUNTIME_DIR:-$HOME}"
Working_Dir="$Base_Dir/.$Prgnam"
PID_File="$Working_Dir/$Prgnam.pid"
Verbose="${Verbose:-0}"

# Function: cleanup files after exit
cleanup() {
  rm -rf "$PID_File"
}

# Function: output date for logging
logdate() (
  if ! date +'%Y-%m-%dT%H:%M:%S%z' 2>/dev/null; then
    # Fail as gracefully as possible
    if ! basename "$0" 2>/dev/null; then
      printf "INFO\n"
    fi
  fi
)

# Function: Log to stderr
# Environment: Verbose (optional)
# Arguments: verbosity, string
log() (
  v=""
  if [ -n "${2:-}" ]; then
    if printf %d "${1:-}" >/dev/null 2>&1; then
      v="${1:-}"
      shift
    fi
  fi
  if [ -n "${Verbose:-}" ] \
    && [ -n "$v" ] \
    && [ "$v" -gt "${Verbose:-}" ]; then
      return
  fi

  printf '\033[1m[%s]: %s\n\033[m' >&2 "$(logdate)" "$*"
)

# Function: Log error to stderr
# Environment: Verbose (optional)
# Arguments: string
logerr() (
  printf '\033[1;31m[%s] ERROR: %s\n\033[m' >&2 "$(logdate)" "$*"
)

# Function: ping a host and report if down or up, if logged
# Environment: $Working_Dir
# Arguments: host
pingcheck() (
  log 1 "Pinging $1..."
  if ! ping -c 3 "$1" >/dev/null 2>&1; then
    if ! [ -f "$Working_Dir/$1" ]; then 
      printf "[%s]:\n%s is DOWN!\n" "$(logdate)" "$1"
      logdate > "$Working_Dir/$1" || exit 1
      return 1
    else
      log 1 "$1 is DOWN!"
    fi
  else
    if [ -f "$Working_Dir/$1" ]; then
      printf "[%s]:\n%s is UP!\n" "$(logdate)" "$1"
      printf "(Down since: %s)\n" "$(cat "$Working_Dir/$1")"
      rm "$Working_Dir/$1" || exit 1
      return 1
    else
      log 1 "$1 is UP!"
    fi
  fi
)

main() {
  retval=0
  bg_pid=""

  while getopts 'v' opt; do
    case "${opt:-}" in
      v) Verbose="$((Verbose+1))" ;;
    esac
  done
  shift "$((OPTIND - 1))"

  if [ -r "$PID_File" ]; then
    logerr "Process $(cat "$PID_File") already running"
    exit
  fi

  mkdir -p "$Working_Dir" || exit 1
  printf %s\\n "$$" > "$PID_File" || exit 1

  if [ "$#" -eq 0 ]; then
    if [ ! -t 0 ]; then 
      set -- $(cat)
    else
      logerr "No hosts provided"
    fi
  fi

  # shellcheck disable=SC2068
  for s in $@; do
    pingcheck "$s" & 
    bg_pid="$(printf '%d\n%s\n' "$!" "$bg_pid")"
  done
  for r in $bg_pid; do
    wait "$r"
    retval="$((retval + $?))"
  done
  return "$retval"
}

trap cleanup EXIT
main "$@"
